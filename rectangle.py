
"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5 
üìå–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞. 
üìå–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è. 
üìå–ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞. 
üìå–°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É. 
üìå–ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ6 
üìå–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É. 
üìå–î–æ–±–∞–≤—å—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø–ª–æ—â–∞–¥–∏ 
üìå–î–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —à–µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
"""

class Rectangle:
    '''–ö–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, —Å –º–µ—Ç–æ–¥–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –∏ –ø–ª–æ—â–∞–¥–∏ —Ñ–∏–≥—É—Ä—ã.'''

    def __init__(self, a: int, b: int = None):
        '''–ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ a –∏ b.'''
        self.a = a
        self.b = b if b is not None else a

    def perimeter(self):
        '''–ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.'''
        return 2 * (self.a + self.b)

    def __add__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.'''
        new_perimeter = self.perimeter() + other.perimeter()
        new_a = max(self.a, self.b, other.a, other.b)
        new_b = new_perimeter/2 - new_a
        
        return Rectangle(new_a, new_b)

    def __sub__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.'''
        new_perimeter = max((self.a+self.b)*2, (other.a +other.b)*2) - min((self.a+self.b)*2, (other.a +other.b)*2)
        new_a = min(self.a, self.b, other.a, other.b)
        new_b = new_perimeter/2 - new_a

        return Rectangle(new_a, new_b)

    def __str__(self):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞'''
        return f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ {self.a} x {self.b}'

    def area(self):
        '''–ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.'''
        return self.a * self.b

    def __eq__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –ø–ª–æ—â–∞–¥–∏.'''
        return self.area() == other.area()

    def __ne__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –ø–ª–æ—â–∞–¥–∏.'''
        return self.area() != other.area()

    def __lt__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏.'''
        return self.area() < other.area()

    def __le__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ø–æ –ø–ª–æ—â–∞–¥–∏.'''
        return self.area() <= other.area()

    def __gt__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏.'''
        return self.area() > other.area()

    def __ge__(self, other):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∞–Ω–¥–µ—Ä –º–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ø–æ –ø–ª–æ—â–∞–¥–∏.'''
        return self.area() >= other.area()


if __name__ == '__main__':
    rect_1 = Rectangle(5, 7)
    rect_2 = Rectangle(11, 2)
    rect_3 = Rectangle(3, 4)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    sum_rect = rect_1 + rect_2
    print(sum_rect)  

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—á–∏—Ç–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    sub_rect = rect_2 - rect_3
    print(sub_rect)  

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø–ª–æ—â–∞–¥–∏
    print(rect_1 == rect_2)  
    print(rect_1 != rect_2)  
    print(rect_1 < rect_2)   
    print(rect_1 <= rect_2)  
    print(rect_1 > rect_2)   
    print(rect_1 >= rect_2)  

